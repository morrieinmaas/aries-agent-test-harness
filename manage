#!/bin/bash
# set -x

# Set of valid agents - add new agents here
export VALID_AGENTS=$(ls aries-backchannels/*/Dockerfile.* | sed "s/^.*file.//" |  tr "\n" " " | sort -u)

export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-aath}"
export AGENT_TIMEOUT=90
export LEDGER_TIMEOUT=60
# these two can be overrode via env vars
export LEDGER_URL_CONFIG="${LEDGER_URL_CONFIG}"
export TAILS_SERVER_URL_CONFIG="${TAILS_SERVER_URL_CONFIG}"
# Running on Windows?
if [[ "$OSTYPE" == "msys" ]]; then
  # Prefix interactive terminal commands ...
  terminalEmu="winpty"
fi

export INTERACTIVE="-it"
if [[ "$NO_TTY" == "1" ]]; then
  unset INTERACTIVE
fi

#Running on Play with Docker?
if [ "${PWD_HOST_FQDN}" != "" ]; then
  if [ "${PWD_HOST_FQDN}" == "labs.play-with-docker.com" ]; then
    export ETH_CONFIG="eth1"
  elif [ "${PWD_HOST_FQDN}" == "play-with-docker.vonx.io" ]; then
    export ETH_CONFIG="eth0"
  else
    export ETH_CONFIG="eth0"
  fi
  myhost=`ifconfig ${ETH_CONFIG} | grep inet | cut -d':' -f2 | cut -d' ' -f1 | sed 's/\./\-/g'`
  if [ "${GENESIS_URL}" == "" ]; then
    export GENESIS_URL="http://ip${myhost}-${SESSION_ID}-9000.direct.${PWD_HOST_FQDN}/genesis"
  fi
  # Check if von-network is running
  # Should this be moved out of the Play with Docker section?
  if [ "${1}" == "run" ]; then
    curl -s ${GENESIS_URL} >/dev/nul
    res=$?
    if test "$res" != "0"; then
      echo "Error: Unable to find the genesis file for the Indy Network"
      echo "Is von-network running?"
      echo GENESIS_URL: ${GENESIS_URL}
      exit 1
    fi
  fi
fi

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build [ -a agent ]* args
    Build the docker images for the agents and the test harness.
      You need to do this first.
      - "agent" must be one from the supported list: ${VALID_AGENTS}
      - multiple agents may be built by specifying multiple -a options
      - By default, all agents and the harness will be built
  
  rebuild [ -a agent ]* args
    Same as build, but adds the --no-cache option to force building from scratch

  run [ -a/b/f/m/d agent ] [-r allure [-e comparison]] [ -i <ini file> ] [ -o <output file> ] [ -n ] [ -v <AIP level> ] [ -t tags ]*
    Run the tagged tests using the specified agents for Acme, Bob, Faber and Mallory.
      Select the agents for the roles of Acme (-a), Bob (-b), Faber (-f) and Mallory (-m).
      - For all to be set to the same, use "-d" for default.
      - The value for agent must be one of: ${VALID_AGENTS}
      Use -t option(s) to indicate tests with the gives tag(s) are to be executed.
        -t options can NOT have spaces, even if the option is quoted; use a behave INI file instead (-i option)
        For not running tagged tests, specify a ~ before the tag, e.g. "-t ~@wip" runs tests that don't have the "@wip" tag
      Use -v to specify the AIP level, in case the agent needs to customize its startup configuration
        "-v 10" or "-v 20"
      Use the -i option to use the specified file as the behave.ini file for the run
      - Default is the behave.ini file in the "aries-test-harness" folder
      Use the -r option to output to allure
        (allure is the only supported option)
      Use the -e option to compare current results to Known Good Results (KGR)
        (comparison is the only supported option)
      Use the -n option to start ngrok endpoints for each agent
        (this is *required* when testing with a Mobile agent)

    Examples:
    $0 run -a acapy -b vcx -f vcx -m acapy  - Run all the tests using the specified agents per role
    $0 run -d vcx                           - Run all tests for all features using the vcx agent in all roles
    $0 run -d acapy -t @SmokeTest -t @P1    - Run the tests tagged @SmokeTest and/or @P1 (priority 1) using all ACA-Py agents
    $0 run -d acapy -b mobile -n -t @MobileTest  - Run the mobile tests using ngrok endpoints
  
  tags - Get a list of the tags on the features tests

  tests - Get a list of the test scenarios in the features, including the associated tags
  scenarios - synonym for tests, but longer and harder to spell

  rebuild - Rebuild the docker images.

  dockerhost - Print the ip address of the Docker Host Adapter as it is seen by containers running in docker.
EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

function echoRed (){
  _msg="${@}"
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function initDockerBuildArgs() {
  dockerBuildArgs=""

  # HTTP proxy, prefer lower case
  if [[ "${http_proxy}" ]]; then
    dockerBuildArgs=" ${dockerBuildArgs} --build-arg http_proxy=${http_proxy}"
  else
    if [[ "${HTTP_PROXY}" ]]; then
      dockerBuildArgs=" ${dockerBuildArgs} --build-arg http_proxy=${HTTP_PROXY}"
    fi
  fi

  # HTTPS proxy, prefer lower case
  if [[ "${https_proxy}" ]]; then
    dockerBuildArgs=" ${dockerBuildArgs} --build-arg https_proxy=${https_proxy}"
  else
    if [[ "${HTTPS_PROXY}" ]]; then
      dockerBuildArgs=" ${dockerBuildArgs} --build-arg https_proxy=${HTTPS_PROXY}"
    fi
  fi

  echo ${dockerBuildArgs}
}

function initEnv() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift
    case "$arg" in
      *=*)
        export "${arg}"
        ;;
      *)
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  export LOG_LEVEL=${LOG_LEVEL:-info}
  export RUST_LOG=${RUST_LOG:-warning}
}

# Build images -- add more backchannels here...
# TODO: Define args to build only what's needed
buildImages() {
  args=${@}

  echo Agents to build: ${BUILD_AGENTS}

  for agent in ${BUILD_AGENTS}; do
    export BACKCHANNEL_FOLDER=$(dirname "$(find aries-backchannels -name *.${agent})" )
    echo Backchannel Folder: ${BACKCHANNEL_FOLDER}
    if [ -e "${BACKCHANNEL_FOLDER}/Dockerfile.${agent}" ]; then
      echo "Building ${agent}-agent-backchannel ..."
      docker build \
        ${args} \
        $(initDockerBuildArgs) \
        -t "${agent}-agent-backchannel" \
        -f "${BACKCHANNEL_FOLDER}/Dockerfile.${agent}" "aries-backchannels/"
    else
      echo "Unable to find Dockerfile to build agent: ${agent}"
      echo "Must be one one of: ${VALID_AGENTS}"
    fi
  done

  echo "Building aries-test-harness ..."
  docker build \
    ${args} \
    $(initDockerBuildArgs) \
    -t 'aries-test-harness' \
    -f 'aries-test-harness/Dockerfile.harness' 'aries-test-harness/'
}

pingLedger(){
  ledger_url=${1}

  # ping ledger web browser for genesis txns
  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null ${ledger_url}/genesis)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForLedger(){
  (
    # Wait for ledger server to start ...
    local startTime=${SECONDS}
    # use global LEDGER_URL
    local LEDGER_URL="${LEDGER_URL_CONFIG:-http://localhost:9000}"
    local rtnCd=0
    printf "waiting for ledger to start"
    while ! pingLedger "$LEDGER_URL"; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${LEDGER_TIMEOUT} )); then
        echoRed "\nThe Indy Ledger failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

pingTailsServer(){
  tails_server_url=${1}

  # ping tails server (ask for a non-existant registry and should return 404)
  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null ${tails_server_url}/404notfound)
  if (( ${rtnCd} == 404 )); then
    return 0
  else
    return 1
  fi
}

waitForTailsServer(){
  (
    # Wait for tails server to start ...
    local startTime=${SECONDS}
    local TAILS_SERVER_URL="${TAILS_SERVER_URL_CONFIG:-http://localhost:6543}"
    local rtnCd=0
    printf "waiting for tails server to start"
    while ! pingTailsServer "$TAILS_SERVER_URL"; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${LEDGER_TIMEOUT} )); then
        echoRed "\nThe tails server failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

pingAgent(){
  name=${1}
  port=${2}

  # ping agent using a backchannel-exposed api
  rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null http://localhost:${port}/agent/command/status/)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForAgent(){
  (
    name=${1}

    # Wait for agent to start ...
    local startTime=${SECONDS}
    rtnCd=0
    printf "waiting for ${name} agent to start"
    while ! pingAgent ${@}; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${AGENT_TIMEOUT} )); then
        echoRed "\nThe agent failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

startAgent() {
  local NAME=$1
  local CONTAINER_NAME=$2
  local IMAGE_NAME=$3
  local PORT_RANGE=$4
  local BACKCHANNEL_PORT=$5
  local AGENT_ENDPOINT_PORT=$6
  local AIP_CONFIG=$7

  if [ ! "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
    if [[ "${USE_NGROK}" = "true" ]]; then
      echo "Starting ngrok for ${NAME} Agent ..."
      if [[ "${IMAGE_NAME}" = "dotnet-master-agent-backchannel" ]]; then
        docker run -d --rm --name "${CONTAINER_NAME}-ngrok" wernight/ngrok ngrok http "${CONTAINER_NAME}:${BACKCHANNEL_PORT}" --log stdout > /dev/null
      else
        docker run -d --rm --name "${CONTAINER_NAME}-ngrok" wernight/ngrok ngrok http "${CONTAINER_NAME}:${AGENT_ENDPOINT_PORT}" --log stdout > /dev/null
      fi
      sleep 1
      export NGROK_NAME="${CONTAINER_NAME}-ngrok"
      docker network connect aath_network "${CONTAINER_NAME}-ngrok"
    else
      export NGROK_NAME=
    fi
    echo "Starting ${NAME} Agent using ${IMAGE_NAME} ..."
    local LEDGER_URL="${LEDGER_URL_CONFIG:-http://${DOCKERHOST}:9000}"
    local TAILS_SERVER_URL="${TAILS_SERVER_URL_CONFIG:-http://${DOCKERHOST}:6543}"
    local container_id=$(docker run -d -it --rm --name "${CONTAINER_NAME}" --expose "${PORT_RANGE}" -p "${PORT_RANGE}:${PORT_RANGE}" -e "NGROK_NAME=${NGROK_NAME}" -e "DOCKERHOST=${DOCKERHOST}" -e "AGENT_NAME=${NAME}" -e "LEDGER_URL=${LEDGER_URL}" -e "TAILS_SERVER_URL=${TAILS_SERVER_URL}" -e "AIP_CONFIG=${AIP_CONFIG}" "${IMAGE_NAME}" -p "${BACKCHANNEL_PORT}" -i false)
    sleep 1
    if [[ "${USE_NGROK}" = "true" ]]; then
      docker network connect aath_network "${CONTAINER_NAME}"
    fi
    if [[ "${IMAGE_NAME}" = "mobile-agent-backchannel" ]]; then
      echo "Tail-ing log files for ${NAME} agent in ${container_id}"
      docker logs -f ${container_id} &
    fi
  else
    echo "${NAME} Agent already running, skipping..."
  fi
}

writeEnvProperties() {
  ACME_VERSION=$(getAgentVersion 9020) 
  BOB_VERSION=$(getAgentVersion 9030)
  FABER_VERSION=$(getAgentVersion 9040)
  MALLORY_VERSION=$(getAgentVersion 9050)

  env_file="${PWD}/aries-test-harness/allure/allure-results/environment.properties"
  declare -a env_array
  env_array+=("role.acme=$ACME_AGENT")
  env_array+=("acme.agent.version=$ACME_VERSION")
  env_array+=("role.bob=$BOB_AGENT")
  env_array+=("bob.agent.version=$BOB_VERSION")
  env_array+=("role.faber=$FABER_AGENT")
  env_array+=("faber.agent.version=$FABER_VERSION")
  env_array+=("role.mallory=$MALLORY_AGENT")
  env_array+=("mallory.agent.version=$MALLORY_VERSION")
  printf "%s\n" "${env_array[@]}" > $env_file

}

getAgentVersion(){
  port=${1}
  # get agent version using a backchannel-exposed api
  version=$(curl -s http://localhost:${port}/agent/command/version/)
  echo "$version"
  # if (( ${rtnCd} == 200 )); then
  #   echo "$version"
  # else
  #   echo "unknown"
  # fi
}

runTests() {
  runArgs=${@}

  if ! waitForLedger; then
    echoRed "\nThe Indy Ledger is not running.\n"
    exit 1
  fi

  if ! waitForTailsServer; then
    echoRed "\nThe Indy Tails Server is not running.\n"
    exit 1
  fi

  export ACME_AGENT=${ACME_AGENT:-${ACME}-agent-backchannel}
  export BOB_AGENT=${BOB_AGENT:-${BOB}-agent-backchannel}
  export FABER_AGENT=${FABER_AGENT:-${FABER}-agent-backchannel}
  export MALLORY_AGENT=${MALLORY_AGENT:-${MALLORY}-agent-backchannel}
  export AIP_CONFIG=${AIP_CONFIG:-10}

  export PROJECT_ID=${PROJECT_ID:-general}

  docker network create aath_network

  startAgent Acme acme_agent "$ACME_AGENT" "9020-9029" 9020 9021 "$AIP_CONFIG"
  startAgent Bob bob_agent "$BOB_AGENT" "9030-9039" 9030 9031 "$AIP_CONFIG"
  startAgent Faber faber_agent "$FABER_AGENT" "9040-9049" 9040 9041 "$AIP_CONFIG"
  startAgent Mallory mallory_agent "$MALLORY_AGENT" "9050-9059" 9050 9051 "$AIP_CONFIG"

  echo
  waitForAgent Acme 9020
  waitForAgent Bob 9030
  waitForAgent Faber 9040
  waitForAgent Mallory 9050

  echo
  # Allure Reports environment.properties file handling
  writeEnvProperties

  echo
  # Behave.ini file handling
  export BEHAVE_INI_TMP="${PWD}/behave.ini.tmp"
  cp ${BEHAVE_INI} ${BEHAVE_INI_TMP}

  if [[ "${REPORT}" = "allure" ]]; then
      echo "Executing tests with Allure Reports."
      ${terminalEmu} docker run ${INTERACTIVE} --rm --network="host" -v ${BEHAVE_INI_TMP}:/aries-test-harness/behave.ini -v ${PWD}/aries-test-harness/allure/allure-results:/aries-test-harness/allure/allure-results/ aries-test-harness -k ${runArgs} -f allure_behave.formatter:AllureFormatter -o ./allure/allure-results -f progress -D Acme=http://0.0.0.0:9020 -D Bob=http://0.0.0.0:9030 -D Faber=http://0.0.0.0:9040 -D Mallory=http://0.0.0.0:9050
  else
      ${terminalEmu} docker run ${INTERACTIVE} --rm --network="host" -v ${BEHAVE_INI_TMP}:/aries-test-harness/behave.ini aries-test-harness -k ${runArgs} -D Acme=http://0.0.0.0:9020 -D Bob=http://0.0.0.0:9030 -D Faber=http://0.0.0.0:9040 -D Mallory=http://0.0.0.0:9050
  fi
  local docker_result=$?
  rm ${BEHAVE_INI_TMP}

  # Export agent logs
  mkdir -p .logs
  docker logs acme_agent > .logs/acme_agent.log
  docker logs bob_agent > .logs/bob_agent.log
  docker logs faber_agent > .logs/faber_agent.log
  docker logs mallory_agent > .logs/mallory_agent.log

  echo
  echo "Cleanup:"
  echo "  - Shutting down all the agents ..."
  docker stop acme_agent bob_agent faber_agent mallory_agent >/dev/null
  if [[ "${USE_NGROK}" = "true" ]]; then
    docker stop acme_agent-ngrok bob_agent-ngrok faber_agent-ngrok mallory_agent-ngrok >/dev/null
  fi
  docker network rm aath_network
  printf "Done\n"

  if [[ "${REPORT}" = "allure" ]]; then
    if [[ "${REPORT_ERROR_TYPE}" = "comparison" ]]; then
      # TODO run the same_as_yesterday.py script and capture the result
      echo "Checking results vs KGR ..."
      ${terminalEmu} docker run ${INTERACTIVE} --rm -v ${PWD}/aries-test-harness/allure/allure-results:/aries-test-harness/allure/allure-results/ --entrypoint /aries-test-harness/allure/same_as_yesterday.sh -e PROJECT_ID=${PROJECT_ID} aries-test-harness
      docker_result=$?
    fi
  fi

  if [ ! "${docker_result}" == "0" ]; then
    echo "Exit with error code ${docker_result}"
    exit ${docker_result}
  fi
}

isAgent() {
  result=false

  for agent in ${VALID_AGENTS}; do
    if [[ "${1}" == "${agent}" ]]; then
        result=true
    fi
  done

  echo $result
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Command to run must be the first argument
COMMAND=$(toLower ${1})
shift

# Handle run args
if [[ "${COMMAND}" == "run" ]]; then
  ACME="none"
  BOB="none"
  FABER="none"
  MALLORY="none"
  TAGS=""
  BEHAVE_INI=aries-test-harness/behave.ini

  while getopts "hna:b:c:f:m:r:e:d:t:v:i:" FLAG; do
    case $FLAG in
        h ) usage ;;
        : ) usage ;;
        \? ) #unrecognized option - show help
        echo -e \\n"Invalid script option: -${OPTARG}"\\n
        usage
            ;;
        r ) export REPORT=${OPTARG}
            ;;
        e ) export REPORT_ERROR_TYPE=${OPTARG}
            ;;
        a ) export ACME=${OPTARG}
            ;;
        b ) export BOB=${OPTARG}
            ;;
        f ) export FABER=${OPTARG}
            ;;
        m ) export MALLORY=${OPTARG}
            ;;
        t ) export TAGS="${TAGS} --tags=${OPTARG}"
            ;;
        v ) export AIP_CONFIG=${OPTARG}
            ;;
        i ) export BEHAVE_INI=${OPTARG}
            ;;
        n ) export USE_NGROK="true"
            ;;
        d )
            export ACME=${OPTARG}
            export BOB=${OPTARG}
            export FABER=${OPTARG}
            export MALLORY=${OPTARG}
            ;;
    esac
  done
  shift $((OPTIND-1))

  for agent in ${ACME} ${BOB} ${FABER} ${MALLORY}; do
      if [[ $(isAgent $agent) == false ]] ; then
          echo All agents Acme, Bob, Faber and Mallory must be set to one of: ${VALID_AGENTS}.
          echo Use \"${0} help\" to get more information.
          exit 1
      fi
  done

  echo Agents to be used:
  echo "  Acme - ${ACME}"
  echo "  Bob - ${BOB}"
  echo "  Faber - ${FABER}"
  echo "  Mallory - ${MALLORY}"
  echo ""
  if [[ "${TAGS}" ]]; then
      echo "Tags: ${TAGS}"
  else
      echo "No tags specified; all tests will be run."
  fi
  if [ ! -f "${BEHAVE_INI}" ]; then
    echo Error - behave INI file does not exist: ${BEHAVE_INI}
    exit 1
  fi

  if [[ "$@" ]]; then
      echo "Other args:  $@"
  fi
fi
echo ""

# Handle additional Build arguments
if [[ "${COMMAND}" == "build" || "${COMMAND}" == "rebuild" ]]; then

  while getopts "ha:" FLAG; do
    case $FLAG in
        h ) usage ;;
        : ) usage ;;
        \? ) #unrecognized option - show help
        set -- "$@" "$FLAG"
            ;;
        a ) export BUILD_AGENTS="${BUILD_AGENTS} ${OPTARG}"
            ;;
    esac
  done
  shift $((OPTIND-1))

  if [ "${BUILD_AGENTS}" == "" ]; then
     BUILD_AGENTS=${VALID_AGENTS}
  fi
fi


pushd ${SCRIPT_HOME} >/dev/null

case "${COMMAND}" in
  build)
      buildImages ${@}
    ;;
  
  rebuild)
      buildImages --no-cache ${@}
    ;;

  run)
      runTests ${TAGS} ${@}
    ;;

  tags)
      grep -h @ aries-test-harness/features/*feature |  tr " " "\n" | sort -u | fmt
    ;;

  tests|scenarios)
      grep -h -B 1 Scenario aries-test-harness/features/*feature
    ;;

  dockerhost)
      echo ${DOCKERHOST}
    ;;
  *)
      usage
    ;;

esac

popd > /dev/null
